(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"/1Gi":function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> NgModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> CommonModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/common\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ReactiveFormsModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyBootstrapModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/bootstrap\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> AppComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./app.component\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ArrayTypeComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./array.type\'</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`Should have atleast </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>minLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>maxLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be more than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>min<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>max<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n@<span class="token function" >NgModule</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  imports<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    CommonModule<span class="token punctuation" >,</span>\n    ReactiveFormsModule<span class="token punctuation" >,</span>\n    FormlyBootstrapModule<span class="token punctuation" >,</span>\n    FormlyModule<span class="token punctuation" >.</span><span class="token function" >forRoot</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      validationMessages<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'required\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> <span class="token string" >\'This field is required\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'minlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'maxlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'min\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'max\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      types<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'formly-group\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'checkbox\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span> component<span class="token punctuation" >:</span> ArrayTypeComponent <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'enum\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'select\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n  declarations<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    AppComponent<span class="token punctuation" >,</span>\n    ArrayTypeComponent<span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppModule</span> <span class="token punctuation" >{</span> <span class="token punctuation" >}</span>\n'},"2g9q":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form">\n    <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n  </formly-form>\n</form>\n'},"4tiL":function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},"6v1N":function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormGroup <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyFormOptions<span class="token punctuation" >,</span> FormlyFieldConfig <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyJsonschema <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core/json-schema\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-app-example\'</span><span class="token punctuation" >,</span>\n  templateUrl<span class="token punctuation" >:</span> <span class="token string" >\'./app.component.html\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppComponent</span> <span class="token punctuation" >{</span>\n  form <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >FormGroup</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  model<span class="token punctuation" >:</span> <span class="token keyword" >any</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    firstName<span class="token punctuation" >:</span> <span class="token string" >\'Chuck\'</span><span class="token punctuation" >,</span>\n    lastName<span class="token punctuation" >:</span> <span class="token string" >\'Norris\'</span><span class="token punctuation" >,</span>\n    age<span class="token punctuation" >:</span> <span class="token number" >75</span><span class="token punctuation" >,</span>\n    bio<span class="token punctuation" >:</span> <span class="token string" >\'Roundhouse kicking asses since 1940\'</span><span class="token punctuation" >,</span>\n    password<span class="token punctuation" >:</span> <span class="token string" >\'noneed\'</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  options<span class="token punctuation" >:</span> FormlyFormOptions <span class="token operator" >=</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n\n  fields<span class="token punctuation" >:</span> FormlyFieldConfig<span class="token punctuation" >[</span><span class="token punctuation" >]</span> <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>formlyJsonschema<span class="token punctuation" >.</span><span class="token function" >toFieldConfig</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A registration form\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'description\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A simple form example.\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'required\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token string" >\'firstName\'</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'lastName\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      <span class="token string" >\'firstName\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'First name\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'lastName\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Last name\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'age\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Age\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'bio\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Bio\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'password\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Password\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'minLength\'</span><span class="token punctuation" >:</span> <span class="token number" >3</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'telephone\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Telephone\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'minLength\'</span><span class="token punctuation" >:</span> <span class="token number" >10</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span><span class="token keyword" >private</span> formlyJsonschema<span class="token punctuation" >:</span> FormlyJsonschema<span class="token punctuation" >)</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span>\n\n  <span class="token function" >submit</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token function" >alert</span><span class="token punctuation" >(</span>JSON<span class="token punctuation" >.</span><span class="token function" >stringify</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>model<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},"8VEz":function(n,s){n.exports='<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>form</span> <span class="token attr-name" >[formGroup]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span> <span class="token attr-name" >(ngSubmit)</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit()<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>formly-form</span> <span class="token attr-name" >[model]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>model<span class="token punctuation" >"</span></span> <span class="token attr-name" >[fields]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>fields<span class="token punctuation" >"</span></span> <span class="token attr-name" >[options]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>options<span class="token punctuation" >"</span></span> <span class="token attr-name" >[form]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n    <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>button</span> <span class="token attr-name" >type</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit<span class="token punctuation" >"</span></span> <span class="token attr-name" >class</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>btn btn-primary submit-button<span class="token punctuation" >"</span></span> <span class="token attr-name" >[disabled]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>!form.valid<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>Submit<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>button</span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>formly-form</span><span class="token punctuation" >></span></span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>form</span><span class="token punctuation" >></span></span>\n'},"9j57":function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FieldArrayType<span class="token punctuation" >,</span> FormlyFormBuilder <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-array-type\'</span><span class="token punctuation" >,</span>\n  template<span class="token punctuation" >:</span> `\n    <span class="token operator" >&lt;</span>legend <span class="token operator" >*</span>ngIf<span class="token operator" >=</span><span class="token string" >"to.label"</span><span class="token operator" >></span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> to<span class="token punctuation" >.</span>label <span class="token punctuation" >}</span><span class="token punctuation" >}</span><span class="token operator" >&lt;</span><span class="token operator" >/</span>legend<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token operator" >*</span>ngFor<span class="token operator" >=</span><span class="token string" >"let field of field.fieldGroup"</span> <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"row"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>formly<span class="token operator" >-</span>field\n        <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-10"</span>\n        <span class="token punctuation" >[</span>field<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"field"</span>\n        <span class="token punctuation" >[</span>options<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"options"</span>\n        <span class="token punctuation" >[</span>form<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"formControl"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>formly<span class="token operator" >-</span>field<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-2"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-danger"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"remove(i)"</span><span class="token operator" >></span>Remove<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"text-right"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-primary"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"add()"</span><span class="token operator" >></span>Add<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n  `<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >ArrayTypeComponent</span> <span class="token keyword" >extends</span> <span class="token class-name" >FieldArrayType</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >:</span> FormlyFormBuilder<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >super</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},"9sOI":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form">\n    <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n  </formly-form>\n</form>\n'},CrXa:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'title': 'My current tasks',\n    'tasks': [\n      {\n        'title': 'My first task',\n        'details': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n        'done': true,\n      },\n      {\n        'title': 'My second task',\n        'details': 'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur',\n        'done': false,\n      },\n    ],\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'title': 'A list of tasks',\n    'type': 'object',\n    'required': [\n      'title',\n    ],\n    'properties': {\n      'title': {\n        'type': 'string',\n        'title': 'Task list title',\n      },\n      'tasks': {\n        'type': 'array',\n        'title': 'Tasks',\n        'items': {\n          'type': 'object',\n          'required': [\n            'title',\n          ],\n          'properties': {\n            'title': {\n              'type': 'string',\n              'title': 'Title',\n              'description': 'A sample title',\n            },\n            'details': {\n              'type': 'string',\n              'title': 'Task details',\n              'description': 'Enter the task details',\n            },\n            'done': {\n              'type': 'boolean',\n              'title': 'Done?',\n              'default': false,\n            },\n          },\n        },\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},D9d4:function(n,s){n.exports='<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>form</span> <span class="token attr-name" >[formGroup]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span> <span class="token attr-name" >(ngSubmit)</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit()<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>formly-form</span> <span class="token attr-name" >[model]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>model<span class="token punctuation" >"</span></span> <span class="token attr-name" >[fields]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>fields<span class="token punctuation" >"</span></span> <span class="token attr-name" >[options]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>options<span class="token punctuation" >"</span></span> <span class="token attr-name" >[form]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n    <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>button</span> <span class="token attr-name" >type</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit<span class="token punctuation" >"</span></span> <span class="token attr-name" >class</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>btn btn-primary submit-button<span class="token punctuation" >"</span></span> <span class="token attr-name" >[disabled]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>!form.valid<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>Submit<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>button</span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>formly-form</span><span class="token punctuation" >></span></span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>form</span><span class="token punctuation" >></span></span>\n'},GK5u:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'number': 3.14,\n    'integer': 42,\n    'numberEnum': 2,\n    'integerRange': 42,\n    'integerRangeSteps': 80,\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'type': 'object',\n    'title': 'Number fields & widgets',\n    'properties': {\n      'number': {\n        'title': 'Number',\n        'type': 'number',\n      },\n      'integer': {\n        'title': 'Integer',\n        'type': 'integer',\n      },\n      'numberEnum': {\n        'type': 'number',\n        'title': 'Number enum',\n        'enum': [\n          1,\n          2,\n          3,\n        ],\n      },\n      'numberEnumRadio': {\n        'type': 'number',\n        'title': 'Number enum',\n        'enum': [\n          1,\n          2,\n          3,\n        ],\n      },\n      'integerRange': {\n        'title': 'Integer range',\n        'type': 'integer',\n        'minimum': 42,\n        'maximum': 100,\n      },\n      'integerRangeSteps': {\n        'title': 'Integer range (by 10)',\n        'type': 'integer',\n        'minimum': 50,\n        'maximum': 100,\n        'multipleOf': 10,\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},O6WF:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> NgModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> CommonModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/common\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ReactiveFormsModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyBootstrapModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/bootstrap\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> AppComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./app.component\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ArrayTypeComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./array.type\'</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`Should have atleast </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>minLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>maxLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be more than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>min<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>max<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n@<span class="token function" >NgModule</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  imports<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    CommonModule<span class="token punctuation" >,</span>\n    ReactiveFormsModule<span class="token punctuation" >,</span>\n    FormlyBootstrapModule<span class="token punctuation" >,</span>\n    FormlyModule<span class="token punctuation" >.</span><span class="token function" >forRoot</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      validationMessages<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'required\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> <span class="token string" >\'This field is required\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'minlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'maxlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'min\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'max\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      types<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'formly-group\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'checkbox\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span> component<span class="token punctuation" >:</span> ArrayTypeComponent <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'enum\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'select\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n  declarations<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    AppComponent<span class="token punctuation" >,</span>\n    ArrayTypeComponent<span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppModule</span> <span class="token punctuation" >{</span> <span class="token punctuation" >}</span>\n'},OnWt:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormGroup <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyFormOptions<span class="token punctuation" >,</span> FormlyFieldConfig <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyJsonschema <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core/json-schema\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-app-example\'</span><span class="token punctuation" >,</span>\n  templateUrl<span class="token punctuation" >:</span> <span class="token string" >\'./app.component.html\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppComponent</span> <span class="token punctuation" >{</span>\n  form <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >FormGroup</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  model<span class="token punctuation" >:</span> <span class="token keyword" >any</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    <span class="token string" >\'listOfStrings\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token string" >\'foo\'</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'bar\'</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'bazinga\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'multipleChoicesList\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token string" >\'foo\'</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'bar\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'fixedItemsList\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token string" >\'Some text\'</span><span class="token punctuation" >,</span>\n      <span class="token keyword" >true</span><span class="token punctuation" >,</span>\n      <span class="token number" >123</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token comment" spellcheck="true">// \'minItemsList\': [</span>\n    <span class="token comment" spellcheck="true">//   {</span>\n    <span class="token comment" spellcheck="true">//     \'name\': \'Default name\',</span>\n    <span class="token comment" spellcheck="true">//   },</span>\n    <span class="token comment" spellcheck="true">//   {</span>\n    <span class="token comment" spellcheck="true">//     \'name\': \'Default name\',</span>\n    <span class="token comment" spellcheck="true">//   },</span>\n    <span class="token comment" spellcheck="true">//   {</span>\n    <span class="token comment" spellcheck="true">//     \'name\': \'Default name\',</span>\n    <span class="token comment" spellcheck="true">//   },</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'defaultsAndMinItems\': [</span>\n    <span class="token comment" spellcheck="true">//   \'carp\',</span>\n    <span class="token comment" spellcheck="true">//   \'trout\',</span>\n    <span class="token comment" spellcheck="true">//   \'bream\',</span>\n    <span class="token comment" spellcheck="true">//   \'unidentified\',</span>\n    <span class="token comment" spellcheck="true">//   \'unidentified\',</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'nestedList\': [</span>\n    <span class="token comment" spellcheck="true">//   [</span>\n    <span class="token comment" spellcheck="true">//     \'lorem\',</span>\n    <span class="token comment" spellcheck="true">//     \'ipsum\',</span>\n    <span class="token comment" spellcheck="true">//   ],</span>\n    <span class="token comment" spellcheck="true">//   [</span>\n    <span class="token comment" spellcheck="true">//     \'dolor\',</span>\n    <span class="token comment" spellcheck="true">//   ],</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'unorderable\': [</span>\n    <span class="token comment" spellcheck="true">//   \'one\',</span>\n    <span class="token comment" spellcheck="true">//   \'two\',</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'unremovable\': [</span>\n    <span class="token comment" spellcheck="true">//   \'one\',</span>\n    <span class="token comment" spellcheck="true">//   \'two\',</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'noToolbar\': [</span>\n    <span class="token comment" spellcheck="true">//   \'one\',</span>\n    <span class="token comment" spellcheck="true">//   \'two\',</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n    <span class="token comment" spellcheck="true">// \'fixedNoToolbar\': [</span>\n    <span class="token comment" spellcheck="true">//   42,</span>\n    <span class="token comment" spellcheck="true">//   true,</span>\n    <span class="token comment" spellcheck="true">//   \'additional item one\',</span>\n    <span class="token comment" spellcheck="true">//   \'additional item two\',</span>\n    <span class="token comment" spellcheck="true">// ],</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  options<span class="token punctuation" >:</span> FormlyFormOptions <span class="token operator" >=</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n\n  fields<span class="token punctuation" >:</span> FormlyFieldConfig<span class="token punctuation" >[</span><span class="token punctuation" >]</span> <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>formlyJsonschema<span class="token punctuation" >.</span><span class="token function" >toFieldConfig</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    <span class="token string" >\'definitions\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      <span class="token string" >\'Thing\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          <span class="token string" >\'name\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'default\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Default name\'</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      <span class="token string" >\'listOfStrings\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A list of strings\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'items\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n          <span class="token string" >\'default\'</span><span class="token punctuation" >:</span> <span class="token string" >\'bazinga\'</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'multipleChoicesList\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A multiple choices list\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'items\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n          <span class="token string" >\'enum\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n            <span class="token string" >\'foo\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'bar\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'fuzz\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'qux\'</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'uniqueItems\'</span><span class="token punctuation" >:</span> <span class="token keyword" >true</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'fixedItemsList\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A list of fixed items\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'items\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n          <span class="token punctuation" >{</span>\n            <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A string value\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'default\'</span><span class="token punctuation" >:</span> <span class="token string" >\'lorem ipsum\'</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >{</span>\n            <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'a boolean value\'</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'additionalItems\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Additional item\'</span><span class="token punctuation" >,</span>\n          <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token comment" spellcheck="true">// \'minItemsList\': {</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'A list with a minimal number of items\',</span>\n      <span class="token comment" spellcheck="true">//   \'minItems\': 3,</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'$ref\': \'#/definitions/Thing\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'defaultsAndMinItems\': {</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'List and item level defaults\',</span>\n      <span class="token comment" spellcheck="true">//   \'minItems\': 5,</span>\n      <span class="token comment" spellcheck="true">//   \'default\': [</span>\n      <span class="token comment" spellcheck="true">//     \'carp\',</span>\n      <span class="token comment" spellcheck="true">//     \'trout\',</span>\n      <span class="token comment" spellcheck="true">//     \'bream\',</span>\n      <span class="token comment" spellcheck="true">//   ],</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//     \'default\': \'unidentified\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'nestedList\': {</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'Nested list\',</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//     \'title\': \'Inner list\',</span>\n      <span class="token comment" spellcheck="true">//     \'items\': {</span>\n      <span class="token comment" spellcheck="true">//       \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//       \'default\': \'lorem ipsum\',</span>\n      <span class="token comment" spellcheck="true">//     },</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'unorderable\': {</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'Unorderable items\',</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//     \'default\': \'lorem ipsum\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'unremovable\': {</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'Unremovable items\',</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//     \'default\': \'lorem ipsum\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'noToolbar\': {</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'No add, remove and order buttons\',</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'items\': {</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//     \'default\': \'lorem ipsum\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n      <span class="token comment" spellcheck="true">// \'fixedNoToolbar\': {</span>\n      <span class="token comment" spellcheck="true">//   \'title\': \'Fixed array without buttons\',</span>\n      <span class="token comment" spellcheck="true">//   \'type\': \'array\',</span>\n      <span class="token comment" spellcheck="true">//   \'items\': [</span>\n      <span class="token comment" spellcheck="true">//     {</span>\n      <span class="token comment" spellcheck="true">//       \'title\': \'A number\',</span>\n      <span class="token comment" spellcheck="true">//       \'type\': \'number\',</span>\n      <span class="token comment" spellcheck="true">//       \'default\': 42,</span>\n      <span class="token comment" spellcheck="true">//     },</span>\n      <span class="token comment" spellcheck="true">//     {</span>\n      <span class="token comment" spellcheck="true">//       \'title\': \'A boolean\',</span>\n      <span class="token comment" spellcheck="true">//       \'type\': \'boolean\',</span>\n      <span class="token comment" spellcheck="true">//       \'default\': false,</span>\n      <span class="token comment" spellcheck="true">//     },</span>\n      <span class="token comment" spellcheck="true">//   ],</span>\n      <span class="token comment" spellcheck="true">//   \'additionalItems\': {</span>\n      <span class="token comment" spellcheck="true">//     \'title\': \'A string\',</span>\n      <span class="token comment" spellcheck="true">//     \'type\': \'string\',</span>\n      <span class="token comment" spellcheck="true">//     \'default\': \'lorem ipsum\',</span>\n      <span class="token comment" spellcheck="true">//   },</span>\n      <span class="token comment" spellcheck="true">// },</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span><span class="token keyword" >private</span> formlyJsonschema<span class="token punctuation" >:</span> FormlyJsonschema<span class="token punctuation" >)</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span>\n\n  <span class="token function" >submit</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token function" >alert</span><span class="token punctuation" >(</span>JSON<span class="token punctuation" >.</span><span class="token function" >stringify</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>model<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},PCnE:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},QZn5:function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    firstName: 'Chuck',\n    lastName: 'Norris',\n    age: 75,\n    bio: 'Roundhouse kicking asses since 1940',\n    password: 'noneed',\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'title': 'A registration form',\n    'description': 'A simple form example.',\n    'type': 'object',\n    'required': [\n      'firstName',\n      'lastName',\n    ],\n    'properties': {\n      'firstName': {\n        'type': 'string',\n        'title': 'First name',\n      },\n      'lastName': {\n        'type': 'string',\n        'title': 'Last name',\n      },\n      'age': {\n        'type': 'integer',\n        'title': 'Age',\n      },\n      'bio': {\n        'type': 'string',\n        'title': 'Bio',\n      },\n      'password': {\n        'type': 'string',\n        'title': 'Password',\n        'minLength': 3,\n      },\n      'telephone': {\n        'type': 'string',\n        'title': 'Telephone',\n        'minLength': 10,\n      },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},QuwZ:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType, FormlyFormBuilder } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup" class="row">\n      <formly-field\n        class="col-sm-10"\n        [field]="field"\n        [options]="options"\n        [form]="formControl">\n      </formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {\n  constructor(builder: FormlyFormBuilder) {\n    super(builder);\n  }\n}\n'},SWIN:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormGroup <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyFormOptions<span class="token punctuation" >,</span> FormlyFieldConfig <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyJsonschema <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core/json-schema\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-app-example\'</span><span class="token punctuation" >,</span>\n  templateUrl<span class="token punctuation" >:</span> <span class="token string" >\'./app.component.html\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppComponent</span> <span class="token punctuation" >{</span>\n  form <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >FormGroup</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  model<span class="token punctuation" >:</span> <span class="token keyword" >any</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    <span class="token string" >\'number\'</span><span class="token punctuation" >:</span> <span class="token number" >3.14</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'integer\'</span><span class="token punctuation" >:</span> <span class="token number" >42</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'numberEnum\'</span><span class="token punctuation" >:</span> <span class="token number" >2</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'integerRange\'</span><span class="token punctuation" >:</span> <span class="token number" >42</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'integerRangeSteps\'</span><span class="token punctuation" >:</span> <span class="token number" >80</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  options<span class="token punctuation" >:</span> FormlyFormOptions <span class="token operator" >=</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n\n  fields<span class="token punctuation" >:</span> FormlyFieldConfig<span class="token punctuation" >[</span><span class="token punctuation" >]</span> <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>formlyJsonschema<span class="token punctuation" >.</span><span class="token function" >toFieldConfig</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Number fields &amp; widgets\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      <span class="token string" >\'number\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Number\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'integer\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Integer\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'numberEnum\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Number enum\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'enum\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n          <span class="token number" >1</span><span class="token punctuation" >,</span>\n          <span class="token number" >2</span><span class="token punctuation" >,</span>\n          <span class="token number" >3</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'numberEnumRadio\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Number enum\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'enum\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n          <span class="token number" >1</span><span class="token punctuation" >,</span>\n          <span class="token number" >2</span><span class="token punctuation" >,</span>\n          <span class="token number" >3</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'integerRange\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Integer range\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'minimum\'</span><span class="token punctuation" >:</span> <span class="token number" >42</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'maximum\'</span><span class="token punctuation" >:</span> <span class="token number" >100</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'integerRangeSteps\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Integer range (by 10)\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'minimum\'</span><span class="token punctuation" >:</span> <span class="token number" >50</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'maximum\'</span><span class="token punctuation" >:</span> <span class="token number" >100</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'multipleOf\'</span><span class="token punctuation" >:</span> <span class="token number" >10</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span><span class="token keyword" >private</span> formlyJsonschema<span class="token punctuation" >:</span> FormlyJsonschema<span class="token punctuation" >)</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span>\n\n  <span class="token function" >submit</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token function" >alert</span><span class="token punctuation" >(</span>JSON<span class="token punctuation" >.</span><span class="token function" >stringify</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>model<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},UkgI:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormGroup <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyFormOptions<span class="token punctuation" >,</span> FormlyFieldConfig <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyJsonschema <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core/json-schema\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-app-example\'</span><span class="token punctuation" >,</span>\n  templateUrl<span class="token punctuation" >:</span> <span class="token string" >\'./app.component.html\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppComponent</span> <span class="token punctuation" >{</span>\n  form <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >FormGroup</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  model<span class="token punctuation" >:</span> <span class="token keyword" >any</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'My current tasks\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'tasks\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'My first task\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'details\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'done\'</span><span class="token punctuation" >:</span> <span class="token keyword" >true</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >{</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'My second task\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'details\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'done\'</span><span class="token punctuation" >:</span> <span class="token keyword" >false</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n  options<span class="token punctuation" >:</span> FormlyFormOptions <span class="token operator" >=</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >;</span>\n\n  fields<span class="token punctuation" >:</span> FormlyFieldConfig<span class="token punctuation" >[</span><span class="token punctuation" >]</span> <span class="token operator" >=</span> <span class="token punctuation" >[</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>formlyJsonschema<span class="token punctuation" >.</span><span class="token function" >toFieldConfig</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A list of tasks\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'required\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n      <span class="token string" >\'title\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Task list title\'</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token string" >\'tasks\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Tasks\'</span><span class="token punctuation" >,</span>\n        <span class="token string" >\'items\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span>\n          <span class="token string" >\'required\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n            <span class="token string" >\'title\'</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n          <span class="token string" >\'properties\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Title\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'description\'</span><span class="token punctuation" >:</span> <span class="token string" >\'A sample title\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'details\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Task details\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'description\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Enter the task details\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n            <span class="token string" >\'done\'</span><span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              <span class="token string" >\'type\'</span><span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'title\'</span><span class="token punctuation" >:</span> <span class="token string" >\'Done?\'</span><span class="token punctuation" >,</span>\n              <span class="token string" >\'default\'</span><span class="token punctuation" >:</span> <span class="token keyword" >false</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >]</span><span class="token punctuation" >;</span>\n\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span><span class="token keyword" >private</span> formlyJsonschema<span class="token punctuation" >:</span> FormlyJsonschema<span class="token punctuation" >)</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span>\n\n  <span class="token function" >submit</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token function" >alert</span><span class="token punctuation" >(</span>JSON<span class="token punctuation" >.</span><span class="token function" >stringify</span><span class="token punctuation" >(</span><span class="token keyword" >this</span><span class="token punctuation" >.</span>model<span class="token punctuation" >)</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},c332:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType, FormlyFormBuilder } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup" class="row">\n      <formly-field\n        class="col-sm-10"\n        [field]="field"\n        [options]="options"\n        [form]="formControl">\n      </formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {\n  constructor(builder: FormlyFormBuilder) {\n    super(builder);\n  }\n}\n'},"ct/P":function(n,s){n.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form = new FormGroup({});\n  model: any = {\n    'listOfStrings': [\n      'foo',\n      'bar',\n      'bazinga',\n    ],\n    'multipleChoicesList': [\n      'foo',\n      'bar',\n    ],\n    'fixedItemsList': [\n      'Some text',\n      true,\n      123,\n    ],\n    // 'minItemsList': [\n    //   {\n    //     'name': 'Default name',\n    //   },\n    //   {\n    //     'name': 'Default name',\n    //   },\n    //   {\n    //     'name': 'Default name',\n    //   },\n    // ],\n    // 'defaultsAndMinItems': [\n    //   'carp',\n    //   'trout',\n    //   'bream',\n    //   'unidentified',\n    //   'unidentified',\n    // ],\n    // 'nestedList': [\n    //   [\n    //     'lorem',\n    //     'ipsum',\n    //   ],\n    //   [\n    //     'dolor',\n    //   ],\n    // ],\n    // 'unorderable': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'unremovable': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'noToolbar': [\n    //   'one',\n    //   'two',\n    // ],\n    // 'fixedNoToolbar': [\n    //   42,\n    //   true,\n    //   'additional item one',\n    //   'additional item two',\n    // ],\n  };\n  options: FormlyFormOptions = {};\n\n  fields: FormlyFieldConfig[] = [this.formlyJsonschema.toFieldConfig({\n    'definitions': {\n      'Thing': {\n        'type': 'object',\n        'properties': {\n          'name': {\n            'type': 'string',\n            'default': 'Default name',\n          },\n        },\n      },\n    },\n    'type': 'object',\n    'properties': {\n      'listOfStrings': {\n        'type': 'array',\n        'title': 'A list of strings',\n        'items': {\n          'type': 'string',\n          'default': 'bazinga',\n        },\n      },\n      'multipleChoicesList': {\n        'type': 'array',\n        'title': 'A multiple choices list',\n        'items': {\n          'type': 'string',\n          'enum': [\n            'foo',\n            'bar',\n            'fuzz',\n            'qux',\n          ],\n        },\n        'uniqueItems': true,\n      },\n      'fixedItemsList': {\n        'type': 'array',\n        'title': 'A list of fixed items',\n        'items': [\n          {\n            'title': 'A string value',\n            'type': 'string',\n            'default': 'lorem ipsum',\n          },\n          {\n            'title': 'a boolean value',\n            'type': 'boolean',\n          },\n        ],\n        'additionalItems': {\n          'title': 'Additional item',\n          'type': 'number',\n        },\n      },\n      // 'minItemsList': {\n      //   'type': 'array',\n      //   'title': 'A list with a minimal number of items',\n      //   'minItems': 3,\n      //   'items': {\n      //     '$ref': '#/definitions/Thing',\n      //   },\n      // },\n      // 'defaultsAndMinItems': {\n      //   'type': 'array',\n      //   'title': 'List and item level defaults',\n      //   'minItems': 5,\n      //   'default': [\n      //     'carp',\n      //     'trout',\n      //     'bream',\n      //   ],\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'unidentified',\n      //   },\n      // },\n      // 'nestedList': {\n      //   'type': 'array',\n      //   'title': 'Nested list',\n      //   'items': {\n      //     'type': 'array',\n      //     'title': 'Inner list',\n      //     'items': {\n      //       'type': 'string',\n      //       'default': 'lorem ipsum',\n      //     },\n      //   },\n      // },\n      // 'unorderable': {\n      //   'title': 'Unorderable items',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'unremovable': {\n      //   'title': 'Unremovable items',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'noToolbar': {\n      //   'title': 'No add, remove and order buttons',\n      //   'type': 'array',\n      //   'items': {\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n      // 'fixedNoToolbar': {\n      //   'title': 'Fixed array without buttons',\n      //   'type': 'array',\n      //   'items': [\n      //     {\n      //       'title': 'A number',\n      //       'type': 'number',\n      //       'default': 42,\n      //     },\n      //     {\n      //       'title': 'A boolean',\n      //       'type': 'boolean',\n      //       'default': false,\n      //     },\n      //   ],\n      //   'additionalItems': {\n      //     'title': 'A string',\n      //     'type': 'string',\n      //     'default': 'lorem ipsum',\n      //   },\n      // },\n    },\n  })];\n\n  constructor(private formlyJsonschema: FormlyJsonschema) {}\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"},"eh/B":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form">\n    <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n  </formly-form>\n</form>\n'},"gh/q":function(n,s,a){"use strict";a.r(s);var t=a("CcnG");function p(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function o(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function e(n,s){return"This value should be more than "+s.templateOptions.min}function l(n,s){return"This value should be less than "+s.templateOptions.max}var c=function(){},u=a("gIcY"),i=Object.assign||function(n){for(var s,a=1,t=arguments.length;a<t;a++)for(var p in s=arguments[a])Object.prototype.hasOwnProperty.call(s,p)&&(n[p]=s[p]);return n},r=function(){function n(){}return n.prototype.toFieldConfig=function(n){return this._toFieldConfig(n)},n.prototype._toFieldConfig=function(n,s){var a=this,t=i({},s?{key:s}:{},{type:n.type,defaultValue:n.default,templateOptions:{minLength:n.minLength,maxLength:n.maxLength,label:n.title,readonly:n.readOnly,pattern:n.pattern,description:n.description}});switch(n.enum&&("integer"!==t.type&&"number"!==t.type||(t.parsers=[Number]),t.type="enum",t.templateOptions.options=n.enum,t.templateOptions.labelProp=function(n){return n},t.templateOptions.valueProp=function(n){return n}),n.type){case"object":t.fieldGroup=[],Object.keys(n.properties).forEach(function(s){var p=a._toFieldConfig(n.properties[s],s);Array.isArray(n.required)&&-1!==n.required.indexOf(s)&&(p.templateOptions.required=!0),t.fieldGroup.push(p)});break;case"array":Array.isArray(n.items)?(t._fieldArray=[],t.fieldGroup=[],n.items.forEach(function(n){return t._fieldArray.push(a._toFieldConfig(n))}),n.additionalItems&&(t._additionalFieldArray=this._toFieldConfig(n.additionalItems)),Object.defineProperty(t,"fieldArray",{get:function(){return t._fieldArray[t.fieldGroup.length]||t._additionalFieldArray},enumerable:!0,configurable:!0})):t.fieldArray=this._toFieldConfig(n.items)}return t},n.ngInjectableDef=t.defineInjectable({factory:function(){return new n},token:n,providedIn:"root"}),n}(),k=function(){function n(n){this.formlyJsonschema=n,this.form=new u.FormGroup({}),this.model={firstName:"Chuck",lastName:"Norris",age:75,bio:"Roundhouse kicking asses since 1940",password:"noneed"},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({title:"A registration form",description:"A simple form example.",type:"object",required:["firstName","lastName"],properties:{firstName:{type:"string",title:"First name"},lastName:{type:"string",title:"Last name"},age:{type:"integer",title:"Age"},bio:{type:"string",title:"Bio"},password:{type:"string",title:"Password",minLength:3},telephone:{type:"string",title:"Telephone",minLength:10}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),m={title:"Simple",component:k,debug:!1,files:[{file:"app.component.html",content:a("D9d4"),filecontent:a("2g9q")},{file:"app.component.ts",content:a("6v1N"),filecontent:a("QZn5")},{file:"app.module.ts",content:a("/1Gi"),filecontent:a("y9/8")},{file:"array.type.ts",content:a("qSz5"),filecontent:a("c332")}]};function d(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function g(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function f(n,s){return"This value should be more than "+s.templateOptions.min}function y(n,s){return"This value should be less than "+s.templateOptions.max}var b=function(){},h=function(){function n(n){this.formlyJsonschema=n,this.form=new u.FormGroup({}),this.model={number:3.14,integer:42,numberEnum:2,integerRange:42,integerRangeSteps:80},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({type:"object",title:"Number fields & widgets",properties:{number:{title:"Number",type:"number"},integer:{title:"Integer",type:"integer"},numberEnum:{type:"number",title:"Number enum",enum:[1,2,3]},numberEnumRadio:{type:"number",title:"Number enum",enum:[1,2,3]},integerRange:{title:"Integer range",type:"integer",minimum:42,maximum:100},integerRangeSteps:{title:"Integer range (by 10)",type:"integer",minimum:50,maximum:100,multipleOf:10}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),v={title:"Numbers",component:h,debug:!1,files:[{file:"app.component.html",content:a("8VEz"),filecontent:a("9sOI")},{file:"app.component.ts",content:a("SWIN"),filecontent:a("GK5u")},{file:"app.module.ts",content:a("O6WF"),filecontent:a("PCnE")},{file:"array.type.ts",content:a("9j57"),filecontent:a("QuwZ")}]};function x(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function w(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function F(n,s){return"This value should be more than "+s.templateOptions.min}function C(n,s){return"This value should be less than "+s.templateOptions.max}var M=function(){},O=function(){function n(n){this.formlyJsonschema=n,this.form=new u.FormGroup({}),this.model={title:"My current tasks",tasks:[{title:"My first task",details:"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",done:!0},{title:"My second task",details:"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur",done:!1}]},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({title:"A list of tasks",type:"object",required:["title"],properties:{title:{type:"string",title:"Task list title"},tasks:{type:"array",title:"Tasks",items:{type:"object",required:["title"],properties:{title:{type:"string",title:"Title",description:"A sample title"},details:{type:"string",title:"Task details",description:"Enter the task details"},done:{type:"boolean",title:"Done?",default:!1}}}}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),A={title:"Nested",component:O,debug:!1,files:[{file:"app.component.html",content:a("p1f6"),filecontent:a("n+Yq")},{file:"app.component.ts",content:a("UkgI"),filecontent:a("CrXa")},{file:"app.module.ts",content:a("za8m"),filecontent:a("v7uz")},{file:"array.type.ts",content:a("tRXl"),filecontent:a("p+p7")}]};function T(n,s){return"Should have atleast "+s.templateOptions.minLength+" characters"}function N(n,s){return"This value should be less than "+s.templateOptions.maxLength+" characters"}function S(n,s){return"This value should be more than "+s.templateOptions.min}function R(n,s){return"This value should be less than "+s.templateOptions.max}var I=function(){},V=function(){function n(n){this.formlyJsonschema=n,this.form=new u.FormGroup({}),this.model={listOfStrings:["foo","bar","bazinga"],multipleChoicesList:["foo","bar"],fixedItemsList:["Some text",!0,123]},this.options={},this.fields=[this.formlyJsonschema.toFieldConfig({definitions:{Thing:{type:"object",properties:{name:{type:"string",default:"Default name"}}}},type:"object",properties:{listOfStrings:{type:"array",title:"A list of strings",items:{type:"string",default:"bazinga"}},multipleChoicesList:{type:"array",title:"A multiple choices list",items:{type:"string",enum:["foo","bar","fuzz","qux"]},uniqueItems:!0},fixedItemsList:{type:"array",title:"A list of fixed items",items:[{title:"A string value",type:"string",default:"lorem ipsum"},{title:"a boolean value",type:"boolean"}],additionalItems:{title:"Additional item",type:"number"}}}})]}return n.prototype.submit=function(){alert(JSON.stringify(this.model))},n}(),L={examples:[m,v,A,{title:"Arrays",component:V,debug:!1,files:[{file:"app.component.html",content:a("oNNE"),filecontent:a("eh/B")},{file:"app.component.ts",content:a("OnWt"),filecontent:a("ct/P")},{file:"app.module.ts",content:a("qcGA"),filecontent:a("4tiL")},{file:"array.type.ts",content:a("zUg9"),filecontent:a("iek7")}]}]},G=function(){},q=a("NcP4"),J=a("goW2"),_=a("htty"),j=a("MT1c"),D=a("1Q/V"),B=a("9+aI"),$=a("haId"),z=a("LJsP"),U=a("yR2A"),P=a("grA4"),E=a("UFMs"),W=a("cI/F"),Q=a("fVcV"),Z=a("DAbo"),Y=a("Ip0R"),X=a("mrSG"),H=a("HkYz"),K=function(n){function s(s){return n.call(this,s)||this}return Object(X.__extends)(s,n),s}(H.a),nn=a("UcnZ"),sn=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function an(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),t["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function tn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),t["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null]],null,null,W.b,W.a)),t["\u0275did"](2,16760832,null,0,Q.a,[Z.b],{form:[0,"form"],field:[1,"field"],options:[2,"options"]},null),(n()(),t["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),t["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0,p=n.component;return"click"===s&&(t=!1!==p.remove(p.i)&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Remove"]))],function(n,s){var a=s.component;n(s,2,0,a.formControl,s.context.$implicit,a.options)},function(n,s){n(s,1,0,t["\u0275nov"](s,2).field.hide?"none":"")})}function pn(n){return t["\u0275vid"](0,[(n()(),t["\u0275and"](16777216,null,null,1,null,an)),t["\u0275did"](1,16384,null,0,Y.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),t["\u0275and"](16777216,null,null,1,null,tn)),t["\u0275did"](3,278528,null,0,Y.NgForOf,[t.ViewContainerRef,t.TemplateRef,t.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),t["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),t["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0;return"click"===s&&(t=!1!==n.component.add()&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}var on=t["\u0275ccf"]("formly-array-type",K,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,pn,sn)),t["\u0275did"](1,49152,null,0,K,[nn.a],null,null)],null,null)},{form:"form",field:"field",options:"options",model:"model"},{},[]),en=function(n){function s(s){return n.call(this,s)||this}return Object(X.__extends)(s,n),s}(H.a),ln=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function cn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),t["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function un(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),t["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null]],null,null,W.b,W.a)),t["\u0275did"](2,16760832,null,0,Q.a,[Z.b],{form:[0,"form"],field:[1,"field"],options:[2,"options"]},null),(n()(),t["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),t["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0,p=n.component;return"click"===s&&(t=!1!==p.remove(p.i)&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Remove"]))],function(n,s){var a=s.component;n(s,2,0,a.formControl,s.context.$implicit,a.options)},function(n,s){n(s,1,0,t["\u0275nov"](s,2).field.hide?"none":"")})}function rn(n){return t["\u0275vid"](0,[(n()(),t["\u0275and"](16777216,null,null,1,null,cn)),t["\u0275did"](1,16384,null,0,Y.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),t["\u0275and"](16777216,null,null,1,null,un)),t["\u0275did"](3,278528,null,0,Y.NgForOf,[t.ViewContainerRef,t.TemplateRef,t.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),t["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),t["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0;return"click"===s&&(t=!1!==n.component.add()&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}var kn=t["\u0275ccf"]("formly-array-type",en,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,rn,ln)),t["\u0275did"](1,49152,null,0,en,[nn.a],null,null)],null,null)},{form:"form",field:"field",options:"options",model:"model"},{},[]),mn=function(n){function s(s){return n.call(this,s)||this}return Object(X.__extends)(s,n),s}(H.a),dn=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function gn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),t["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function fn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),t["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null]],null,null,W.b,W.a)),t["\u0275did"](2,16760832,null,0,Q.a,[Z.b],{form:[0,"form"],field:[1,"field"],options:[2,"options"]},null),(n()(),t["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),t["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0,p=n.component;return"click"===s&&(t=!1!==p.remove(p.i)&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Remove"]))],function(n,s){var a=s.component;n(s,2,0,a.formControl,s.context.$implicit,a.options)},function(n,s){n(s,1,0,t["\u0275nov"](s,2).field.hide?"none":"")})}function yn(n){return t["\u0275vid"](0,[(n()(),t["\u0275and"](16777216,null,null,1,null,gn)),t["\u0275did"](1,16384,null,0,Y.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),t["\u0275and"](16777216,null,null,1,null,fn)),t["\u0275did"](3,278528,null,0,Y.NgForOf,[t.ViewContainerRef,t.TemplateRef,t.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),t["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),t["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0;return"click"===s&&(t=!1!==n.component.add()&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}var bn=t["\u0275ccf"]("formly-array-type",mn,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,yn,dn)),t["\u0275did"](1,49152,null,0,mn,[nn.a],null,null)],null,null)},{form:"form",field:"field",options:"options",model:"model"},{},[]),hn=function(n){function s(s){return n.call(this,s)||this}return Object(X.__extends)(s,n),s}(H.a),vn=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function xn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(n()(),t["\u0275ted"](1,null,["",""]))],null,function(n,s){n(s,1,0,s.component.to.label)})}function wn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),t["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null]],null,null,W.b,W.a)),t["\u0275did"](2,16760832,null,0,Q.a,[Z.b],{form:[0,"form"],field:[1,"field"],options:[2,"options"]},null),(n()(),t["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(n()(),t["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0,p=n.component;return"click"===s&&(t=!1!==p.remove(p.i)&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Remove"]))],function(n,s){var a=s.component;n(s,2,0,a.formControl,s.context.$implicit,a.options)},function(n,s){n(s,1,0,t["\u0275nov"](s,2).field.hide?"none":"")})}function Fn(n){return t["\u0275vid"](0,[(n()(),t["\u0275and"](16777216,null,null,1,null,xn)),t["\u0275did"](1,16384,null,0,Y.NgIf,[t.ViewContainerRef,t.TemplateRef],{ngIf:[0,"ngIf"]},null),(n()(),t["\u0275and"](16777216,null,null,1,null,wn)),t["\u0275did"](3,278528,null,0,Y.NgForOf,[t.ViewContainerRef,t.TemplateRef,t.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(n()(),t["\u0275eld"](4,0,null,null,2,"div",[["class","text-right"]],null,null,null,null,null)),(n()(),t["\u0275eld"](5,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(n,s,a){var t=!0;return"click"===s&&(t=!1!==n.component.add()&&t),t},null,null)),(n()(),t["\u0275ted"](-1,null,["Add"]))],function(n,s){var a=s.component;n(s,1,0,a.to.label),n(s,3,0,a.field.fieldGroup)},null)}var Cn=t["\u0275ccf"]("formly-array-type",hn,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,Fn,vn)),t["\u0275did"](1,49152,null,0,hn,[nn.a],null,null)],null,null)},{form:"form",field:"field",options:"options",model:"model"},{},[]),Mn=a("pMnS"),On=a("4o01"),An=a("Dl9q"),Tn=a("9Glx"),Nn=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function Sn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,8,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var p=!0,o=n.component;return"submit"===s&&(p=!1!==t["\u0275nov"](n,2).onSubmit(a)&&p),"reset"===s&&(p=!1!==t["\u0275nov"](n,2).onReset()&&p),"ngSubmit"===s&&(p=!1!==o.submit()&&p),p},null,null)),t["\u0275did"](1,16384,null,0,u["\u0275angular_packages_forms_forms_bg"],[],null,null),t["\u0275did"](2,540672,null,0,u.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),t["\u0275prd"](2048,null,u.ControlContainer,null,[u.FormGroupDirective]),t["\u0275did"](4,16384,null,0,u.NgControlStatusGroup,[[4,u.ControlContainer]],null,null),(n()(),t["\u0275eld"](5,0,null,null,3,"formly-form",[],null,null,null,An.b,An.a)),t["\u0275did"](6,966656,null,0,Tn.a,[nn.a,Z.b,[2,u.NgForm],[2,u.FormGroupDirective],[3,Tn.a]],{model:[0,"model"],form:[1,"form"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),t["\u0275eld"](7,0,null,0,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),t["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,6,0,a.model,a.form,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,t["\u0275nov"](s,4).ngClassUntouched,t["\u0275nov"](s,4).ngClassTouched,t["\u0275nov"](s,4).ngClassPristine,t["\u0275nov"](s,4).ngClassDirty,t["\u0275nov"](s,4).ngClassValid,t["\u0275nov"](s,4).ngClassInvalid,t["\u0275nov"](s,4).ngClassPending),n(s,7,0,!a.form.valid)})}var Rn=t["\u0275ccf"]("formly-app-example",k,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,Sn,Nn)),t["\u0275did"](1,49152,null,0,k,[r],null,null)],null,null)},{},{},[]),In=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function Vn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,8,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var p=!0,o=n.component;return"submit"===s&&(p=!1!==t["\u0275nov"](n,2).onSubmit(a)&&p),"reset"===s&&(p=!1!==t["\u0275nov"](n,2).onReset()&&p),"ngSubmit"===s&&(p=!1!==o.submit()&&p),p},null,null)),t["\u0275did"](1,16384,null,0,u["\u0275angular_packages_forms_forms_bg"],[],null,null),t["\u0275did"](2,540672,null,0,u.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),t["\u0275prd"](2048,null,u.ControlContainer,null,[u.FormGroupDirective]),t["\u0275did"](4,16384,null,0,u.NgControlStatusGroup,[[4,u.ControlContainer]],null,null),(n()(),t["\u0275eld"](5,0,null,null,3,"formly-form",[],null,null,null,An.b,An.a)),t["\u0275did"](6,966656,null,0,Tn.a,[nn.a,Z.b,[2,u.NgForm],[2,u.FormGroupDirective],[3,Tn.a]],{model:[0,"model"],form:[1,"form"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),t["\u0275eld"](7,0,null,0,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),t["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,6,0,a.model,a.form,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,t["\u0275nov"](s,4).ngClassUntouched,t["\u0275nov"](s,4).ngClassTouched,t["\u0275nov"](s,4).ngClassPristine,t["\u0275nov"](s,4).ngClassDirty,t["\u0275nov"](s,4).ngClassValid,t["\u0275nov"](s,4).ngClassInvalid,t["\u0275nov"](s,4).ngClassPending),n(s,7,0,!a.form.valid)})}var Ln=t["\u0275ccf"]("formly-app-example",h,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,Vn,In)),t["\u0275did"](1,49152,null,0,h,[r],null,null)],null,null)},{},{},[]),Gn=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function qn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,8,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var p=!0,o=n.component;return"submit"===s&&(p=!1!==t["\u0275nov"](n,2).onSubmit(a)&&p),"reset"===s&&(p=!1!==t["\u0275nov"](n,2).onReset()&&p),"ngSubmit"===s&&(p=!1!==o.submit()&&p),p},null,null)),t["\u0275did"](1,16384,null,0,u["\u0275angular_packages_forms_forms_bg"],[],null,null),t["\u0275did"](2,540672,null,0,u.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),t["\u0275prd"](2048,null,u.ControlContainer,null,[u.FormGroupDirective]),t["\u0275did"](4,16384,null,0,u.NgControlStatusGroup,[[4,u.ControlContainer]],null,null),(n()(),t["\u0275eld"](5,0,null,null,3,"formly-form",[],null,null,null,An.b,An.a)),t["\u0275did"](6,966656,null,0,Tn.a,[nn.a,Z.b,[2,u.NgForm],[2,u.FormGroupDirective],[3,Tn.a]],{model:[0,"model"],form:[1,"form"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),t["\u0275eld"](7,0,null,0,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),t["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,6,0,a.model,a.form,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,t["\u0275nov"](s,4).ngClassUntouched,t["\u0275nov"](s,4).ngClassTouched,t["\u0275nov"](s,4).ngClassPristine,t["\u0275nov"](s,4).ngClassDirty,t["\u0275nov"](s,4).ngClassValid,t["\u0275nov"](s,4).ngClassInvalid,t["\u0275nov"](s,4).ngClassPending),n(s,7,0,!a.form.valid)})}var Jn=t["\u0275ccf"]("formly-app-example",O,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,qn,Gn)),t["\u0275did"](1,49152,null,0,O,[r],null,null)],null,null)},{},{},[]),_n=t["\u0275crt"]({encapsulation:2,styles:[],data:{}});function jn(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,8,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(n,s,a){var p=!0,o=n.component;return"submit"===s&&(p=!1!==t["\u0275nov"](n,2).onSubmit(a)&&p),"reset"===s&&(p=!1!==t["\u0275nov"](n,2).onReset()&&p),"ngSubmit"===s&&(p=!1!==o.submit()&&p),p},null,null)),t["\u0275did"](1,16384,null,0,u["\u0275angular_packages_forms_forms_bg"],[],null,null),t["\u0275did"](2,540672,null,0,u.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),t["\u0275prd"](2048,null,u.ControlContainer,null,[u.FormGroupDirective]),t["\u0275did"](4,16384,null,0,u.NgControlStatusGroup,[[4,u.ControlContainer]],null,null),(n()(),t["\u0275eld"](5,0,null,null,3,"formly-form",[],null,null,null,An.b,An.a)),t["\u0275did"](6,966656,null,0,Tn.a,[nn.a,Z.b,[2,u.NgForm],[2,u.FormGroupDirective],[3,Tn.a]],{model:[0,"model"],form:[1,"form"],fields:[2,"fields"],options:[3,"options"]},null),(n()(),t["\u0275eld"](7,0,null,0,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(n()(),t["\u0275ted"](-1,null,["Submit"]))],function(n,s){var a=s.component;n(s,2,0,a.form),n(s,6,0,a.model,a.form,a.fields,a.options)},function(n,s){var a=s.component;n(s,0,0,t["\u0275nov"](s,4).ngClassUntouched,t["\u0275nov"](s,4).ngClassTouched,t["\u0275nov"](s,4).ngClassPristine,t["\u0275nov"](s,4).ngClassDirty,t["\u0275nov"](s,4).ngClassValid,t["\u0275nov"](s,4).ngClassInvalid,t["\u0275nov"](s,4).ngClassPending),n(s,7,0,!a.form.valid)})}var Dn=t["\u0275ccf"]("formly-app-example",V,function(n){return t["\u0275vid"](0,[(n()(),t["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,jn,_n)),t["\u0275did"](1,49152,null,0,V,[r],null,null)],null,null)},{},{},[]),Bn=a("M2Lx"),$n=a("eDkP"),zn=a("Fzqc"),Un=a("v9Dh"),Pn=a("6LlJ"),En=a("F6kA"),Wn=a("dWZg"),Qn=a("lLAP"),Zn=a("4c35"),Yn=a("qAlS"),Xn=a("Wf4p"),Hn=a("La40"),Kn=a("SMsm"),ns=a("UodH"),ss=a("5QwG"),as=a("XR12"),ts=a("me7w"),ps=a("N3PW"),os=a("l4pn"),es=a("Fv2i"),ls=a("wBYW"),cs=a("IE48"),us=a("zn1Q"),is=a("Q4Tx"),rs=a("zdmU"),ks=a("Nsh5"),ms=a("8mMr"),ds=a("LC5p"),gs=a("0/Q6"),fs=a("mqvi"),ys=a("lYui"),bs=a("1ey0"),hs=a("ZYCi"),vs=a("cIcG");a.d(s,"ConfigModuleNgFactory",function(){return xs});var xs=t["\u0275cmf"](G,[],function(n){return t["\u0275mod"]([t["\u0275mpd"](512,t.ComponentFactoryResolver,t["\u0275CodegenComponentFactoryResolver"],[[8,[q.a,J.a,_.a,j.a,D.a,B.a,$.a,z.a,U.a,P.a,E.a,on,kn,bn,Cn,Mn.a,On.a,Rn,Ln,Jn,Dn]],[3,t.ComponentFactoryResolver],t.NgModuleRef]),t["\u0275mpd"](4608,Y.NgLocalization,Y.NgLocaleLocalization,[t.LOCALE_ID,[2,Y["\u0275angular_packages_common_common_a"]]]),t["\u0275mpd"](4608,Bn.c,Bn.c,[]),t["\u0275mpd"](4608,$n.c,$n.c,[$n.i,$n.e,t.ComponentFactoryResolver,$n.h,$n.f,t.Injector,t.NgZone,Y.DOCUMENT,zn.b]),t["\u0275mpd"](5120,$n.j,$n.k,[$n.c]),t["\u0275mpd"](5120,Un.b,Un.c,[$n.c]),t["\u0275mpd"](4608,Pn.a,Pn.a,[]),t["\u0275mpd"](4608,En.a,En.a,[]),t["\u0275mpd"](4608,u.FormBuilder,u.FormBuilder,[]),t["\u0275mpd"](4608,u["\u0275angular_packages_forms_forms_i"],u["\u0275angular_packages_forms_forms_i"],[]),t["\u0275mpd"](4608,nn.a,nn.a,[Z.b]),t["\u0275mpd"](1073742336,Y.CommonModule,Y.CommonModule,[]),t["\u0275mpd"](1073742336,Wn.b,Wn.b,[]),t["\u0275mpd"](1073742336,Bn.d,Bn.d,[]),t["\u0275mpd"](1073742336,Qn.a,Qn.a,[]),t["\u0275mpd"](1073742336,zn.a,zn.a,[]),t["\u0275mpd"](1073742336,Zn.g,Zn.g,[]),t["\u0275mpd"](1073742336,Yn.b,Yn.b,[]),t["\u0275mpd"](1073742336,$n.g,$n.g,[]),t["\u0275mpd"](1073742336,Xn.l,Xn.l,[[2,Xn.d]]),t["\u0275mpd"](1073742336,Un.e,Un.e,[]),t["\u0275mpd"](1073742336,Xn.w,Xn.w,[]),t["\u0275mpd"](1073742336,Hn.i,Hn.i,[]),t["\u0275mpd"](1073742336,Kn.b,Kn.b,[]),t["\u0275mpd"](1073742336,ns.c,ns.c,[]),t["\u0275mpd"](1073742336,ss.b,ss.b,[]),t["\u0275mpd"](512,Z.b,Z.b,[]),t["\u0275mpd"](1024,Z.a,function(n,s,a,t,c){return[as.b(n),{types:[{name:"input",component:ts.a,wrappers:["form-field"]},{name:"checkbox",component:ps.a,wrappers:["form-field"],defaultOptions:{templateOptions:{indeterminate:!0,hideLabel:!0}}},{name:"radio",component:os.a,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}},{name:"select",component:es.a,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}},{name:"textarea",component:ls.a,wrappers:["form-field"],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:"multicheckbox",component:cs.a,wrappers:["form-field"],defaultOptions:{templateOptions:{options:[]}}}],wrappers:[{name:"addons",component:us.a},{name:"form-field",component:is.a}],manipulators:[{class:rs.a,method:"run"}]},as.b(s),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:p},{name:"maxlength",message:o},{name:"min",message:e},{name:"max",message:l}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:K},{name:"enum",extends:"select"}]},as.b(a),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:d},{name:"maxlength",message:g},{name:"min",message:f},{name:"max",message:y}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:en},{name:"enum",extends:"select"}]},as.b(t),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:x},{name:"maxlength",message:w},{name:"min",message:F},{name:"max",message:C}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:mn},{name:"enum",extends:"select"}]},as.b(c),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:T},{name:"maxlength",message:N},{name:"min",message:S},{name:"max",message:R}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"object",extends:"formly-group"},{name:"boolean",extends:"checkbox"},{name:"array",component:hn},{name:"enum",extends:"select"}]}]},[Z.b,Z.b,Z.b,Z.b,Z.b]),t["\u0275mpd"](1073742336,as.a,as.a,[Z.b,t.ComponentFactoryResolver,[2,Z.a]]),t["\u0275mpd"](1073742336,ks.h,ks.h,[]),t["\u0275mpd"](1073742336,ms.b,ms.b,[]),t["\u0275mpd"](1073742336,Xn.m,Xn.m,[]),t["\u0275mpd"](1073742336,Xn.u,Xn.u,[]),t["\u0275mpd"](1073742336,ds.b,ds.b,[]),t["\u0275mpd"](1073742336,gs.c,gs.c,[]),t["\u0275mpd"](1073742336,fs.a,fs.a,[]),t["\u0275mpd"](1073742336,u["\u0275angular_packages_forms_forms_bb"],u["\u0275angular_packages_forms_forms_bb"],[]),t["\u0275mpd"](1073742336,u.ReactiveFormsModule,u.ReactiveFormsModule,[]),t["\u0275mpd"](1073742336,ys.a,ys.a,[]),t["\u0275mpd"](1073742336,bs.a,bs.a,[]),t["\u0275mpd"](1073742336,c,c,[]),t["\u0275mpd"](1073742336,b,b,[]),t["\u0275mpd"](1073742336,M,M,[]),t["\u0275mpd"](1073742336,I,I,[]),t["\u0275mpd"](1073742336,hs.s,hs.s,[[2,hs.y],[2,hs.p]]),t["\u0275mpd"](1073742336,G,G,[]),t["\u0275mpd"](1024,hs.n,function(){return[[{path:"",component:vs.a,data:L}]]},[])])})},iek7:function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType, FormlyFormBuilder } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup" class="row">\n      <formly-field\n        class="col-sm-10"\n        [field]="field"\n        [options]="options"\n        [form]="formControl">\n      </formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {\n  constructor(builder: FormlyFormBuilder) {\n    super(builder);\n  }\n}\n'},"n+Yq":function(n,s){n.exports='<form [formGroup]="form" (ngSubmit)="submit()">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form">\n    <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n  </formly-form>\n</form>\n'},oNNE:function(n,s){n.exports='<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>form</span> <span class="token attr-name" >[formGroup]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span> <span class="token attr-name" >(ngSubmit)</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit()<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>formly-form</span> <span class="token attr-name" >[model]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>model<span class="token punctuation" >"</span></span> <span class="token attr-name" >[fields]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>fields<span class="token punctuation" >"</span></span> <span class="token attr-name" >[options]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>options<span class="token punctuation" >"</span></span> <span class="token attr-name" >[form]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n    <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>button</span> <span class="token attr-name" >type</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit<span class="token punctuation" >"</span></span> <span class="token attr-name" >class</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>btn btn-primary submit-button<span class="token punctuation" >"</span></span> <span class="token attr-name" >[disabled]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>!form.valid<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>Submit<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>button</span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>formly-form</span><span class="token punctuation" >></span></span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>form</span><span class="token punctuation" >></span></span>\n'},"p+p7":function(n,s){n.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType, FormlyFormBuilder } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <div *ngFor="let field of field.fieldGroup" class="row">\n      <formly-field\n        class="col-sm-10"\n        [field]="field"\n        [options]="options"\n        [form]="formControl">\n      </formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="text-right">\n      <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n    </div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {\n  constructor(builder: FormlyFormBuilder) {\n    super(builder);\n  }\n}\n'},p1f6:function(n,s){n.exports='<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>form</span> <span class="token attr-name" >[formGroup]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span> <span class="token attr-name" >(ngSubmit)</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit()<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>formly-form</span> <span class="token attr-name" >[model]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>model<span class="token punctuation" >"</span></span> <span class="token attr-name" >[fields]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>fields<span class="token punctuation" >"</span></span> <span class="token attr-name" >[options]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>options<span class="token punctuation" >"</span></span> <span class="token attr-name" >[form]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>form<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>\n    <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>button</span> <span class="token attr-name" >type</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>submit<span class="token punctuation" >"</span></span> <span class="token attr-name" >class</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>btn btn-primary submit-button<span class="token punctuation" >"</span></span> <span class="token attr-name" >[disabled]</span><span class="token attr-value" ><span class="token punctuation" >=</span><span class="token punctuation" >"</span>!form.valid<span class="token punctuation" >"</span></span><span class="token punctuation" >></span></span>Submit<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>button</span><span class="token punctuation" >></span></span>\n  <span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>formly-form</span><span class="token punctuation" >></span></span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;/</span>form</span><span class="token punctuation" >></span></span>\n'},qSz5:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FieldArrayType<span class="token punctuation" >,</span> FormlyFormBuilder <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-array-type\'</span><span class="token punctuation" >,</span>\n  template<span class="token punctuation" >:</span> `\n    <span class="token operator" >&lt;</span>legend <span class="token operator" >*</span>ngIf<span class="token operator" >=</span><span class="token string" >"to.label"</span><span class="token operator" >></span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> to<span class="token punctuation" >.</span>label <span class="token punctuation" >}</span><span class="token punctuation" >}</span><span class="token operator" >&lt;</span><span class="token operator" >/</span>legend<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token operator" >*</span>ngFor<span class="token operator" >=</span><span class="token string" >"let field of field.fieldGroup"</span> <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"row"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>formly<span class="token operator" >-</span>field\n        <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-10"</span>\n        <span class="token punctuation" >[</span>field<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"field"</span>\n        <span class="token punctuation" >[</span>options<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"options"</span>\n        <span class="token punctuation" >[</span>form<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"formControl"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>formly<span class="token operator" >-</span>field<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-2"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-danger"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"remove(i)"</span><span class="token operator" >></span>Remove<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"text-right"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-primary"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"add()"</span><span class="token operator" >></span>Add<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n  `<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >ArrayTypeComponent</span> <span class="token keyword" >extends</span> <span class="token class-name" >FieldArrayType</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >:</span> FormlyFormBuilder<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >super</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},qcGA:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> NgModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> CommonModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/common\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ReactiveFormsModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyBootstrapModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/bootstrap\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> AppComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./app.component\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ArrayTypeComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./array.type\'</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`Should have atleast </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>minLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>maxLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be more than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>min<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>max<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n@<span class="token function" >NgModule</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  imports<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    CommonModule<span class="token punctuation" >,</span>\n    ReactiveFormsModule<span class="token punctuation" >,</span>\n    FormlyBootstrapModule<span class="token punctuation" >,</span>\n    FormlyModule<span class="token punctuation" >.</span><span class="token function" >forRoot</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      validationMessages<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'required\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> <span class="token string" >\'This field is required\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'minlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'maxlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'min\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'max\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      types<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'formly-group\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'checkbox\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span> component<span class="token punctuation" >:</span> ArrayTypeComponent <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'enum\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'select\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n  declarations<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    AppComponent<span class="token punctuation" >,</span>\n    ArrayTypeComponent<span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppModule</span> <span class="token punctuation" >{</span> <span class="token punctuation" >}</span>\n'},tRXl:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FieldArrayType<span class="token punctuation" >,</span> FormlyFormBuilder <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-array-type\'</span><span class="token punctuation" >,</span>\n  template<span class="token punctuation" >:</span> `\n    <span class="token operator" >&lt;</span>legend <span class="token operator" >*</span>ngIf<span class="token operator" >=</span><span class="token string" >"to.label"</span><span class="token operator" >></span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> to<span class="token punctuation" >.</span>label <span class="token punctuation" >}</span><span class="token punctuation" >}</span><span class="token operator" >&lt;</span><span class="token operator" >/</span>legend<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token operator" >*</span>ngFor<span class="token operator" >=</span><span class="token string" >"let field of field.fieldGroup"</span> <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"row"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>formly<span class="token operator" >-</span>field\n        <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-10"</span>\n        <span class="token punctuation" >[</span>field<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"field"</span>\n        <span class="token punctuation" >[</span>options<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"options"</span>\n        <span class="token punctuation" >[</span>form<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"formControl"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>formly<span class="token operator" >-</span>field<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-2"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-danger"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"remove(i)"</span><span class="token operator" >></span>Remove<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"text-right"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-primary"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"add()"</span><span class="token operator" >></span>Add<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n  `<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >ArrayTypeComponent</span> <span class="token keyword" >extends</span> <span class="token class-name" >FieldArrayType</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >:</span> FormlyFormBuilder<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >super</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},v7uz:function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},"y9/8":function(n,s){n.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\n\nexport function minlengthValidationMessage(err, field) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'object', extends: 'formly-group' },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'enum', extends: 'select' },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},zUg9:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> Component <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FieldArrayType<span class="token punctuation" >,</span> FormlyFormBuilder <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n\n@<span class="token function" >Component</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  selector<span class="token punctuation" >:</span> <span class="token string" >\'formly-array-type\'</span><span class="token punctuation" >,</span>\n  template<span class="token punctuation" >:</span> `\n    <span class="token operator" >&lt;</span>legend <span class="token operator" >*</span>ngIf<span class="token operator" >=</span><span class="token string" >"to.label"</span><span class="token operator" >></span><span class="token punctuation" >{</span><span class="token punctuation" >{</span> to<span class="token punctuation" >.</span>label <span class="token punctuation" >}</span><span class="token punctuation" >}</span><span class="token operator" >&lt;</span><span class="token operator" >/</span>legend<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token operator" >*</span>ngFor<span class="token operator" >=</span><span class="token string" >"let field of field.fieldGroup"</span> <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"row"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>formly<span class="token operator" >-</span>field\n        <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-10"</span>\n        <span class="token punctuation" >[</span>field<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"field"</span>\n        <span class="token punctuation" >[</span>options<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"options"</span>\n        <span class="token punctuation" >[</span>form<span class="token punctuation" >]</span><span class="token operator" >=</span><span class="token string" >"formControl"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>formly<span class="token operator" >-</span>field<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"col-sm-2"</span><span class="token operator" >></span>\n        <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-danger"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"remove(i)"</span><span class="token operator" >></span>Remove<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n      <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span>div <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"text-right"</span><span class="token operator" >></span>\n      <span class="token operator" >&lt;</span>button <span class="token keyword" >class</span><span class="token operator" >=</span><span class="token string" >"btn btn-primary"</span> type<span class="token operator" >=</span><span class="token string" >"button"</span> <span class="token punctuation" >(</span>click<span class="token punctuation" >)</span><span class="token operator" >=</span><span class="token string" >"add()"</span><span class="token operator" >></span>Add<span class="token operator" >&lt;</span><span class="token operator" >/</span>button<span class="token operator" >></span>\n    <span class="token operator" >&lt;</span><span class="token operator" >/</span>div<span class="token operator" >></span>\n  `<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >ArrayTypeComponent</span> <span class="token keyword" >extends</span> <span class="token class-name" >FieldArrayType</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >constructor</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >:</span> FormlyFormBuilder<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >super</span><span class="token punctuation" >(</span>builder<span class="token punctuation" >)</span><span class="token punctuation" >;</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n'},za8m:function(n,s){n.exports='<span class="token keyword" >import</span> <span class="token punctuation" >{</span> NgModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> CommonModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/common\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ReactiveFormsModule <span class="token punctuation" >}</span> from <span class="token string" >\'@angular/forms\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/core\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> FormlyBootstrapModule <span class="token punctuation" >}</span> from <span class="token string" >\'@ngx-formly/bootstrap\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> AppComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./app.component\'</span><span class="token punctuation" >;</span>\n<span class="token keyword" >import</span> <span class="token punctuation" >{</span> ArrayTypeComponent <span class="token punctuation" >}</span> from <span class="token string" >\'./array.type\'</span><span class="token punctuation" >;</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`Should have atleast </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>minLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxlengthValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>maxLength<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" > characters`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >minValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be more than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>min<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >export</span> <span class="token keyword" >function</span> <span class="token function" >maxValidationMessage</span><span class="token punctuation" >(</span>err<span class="token punctuation" >,</span> field<span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >return</span> <span class="token template-string" ><span class="token string" >`This value should be less than </span><span class="token interpolation" ><span class="token interpolation-punctuation punctuation" >${</span>field<span class="token punctuation" >.</span>templateOptions<span class="token punctuation" >.</span>max<span class="token interpolation-punctuation punctuation" >}</span></span><span class="token string" >`</span></span><span class="token punctuation" >;</span>\n<span class="token punctuation" >}</span>\n\n@<span class="token function" >NgModule</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  imports<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    CommonModule<span class="token punctuation" >,</span>\n    ReactiveFormsModule<span class="token punctuation" >,</span>\n    FormlyBootstrapModule<span class="token punctuation" >,</span>\n    FormlyModule<span class="token punctuation" >.</span><span class="token function" >forRoot</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n      validationMessages<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'required\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> <span class="token string" >\'This field is required\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'minlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'maxlength\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxlengthValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'min\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> minValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'max\'</span><span class="token punctuation" >,</span> message<span class="token punctuation" >:</span> maxValidationMessage <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n      types<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'string\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span>\n          name<span class="token punctuation" >:</span> <span class="token string" >\'integer\'</span><span class="token punctuation" >,</span>\n          <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'input\'</span><span class="token punctuation" >,</span>\n          defaultOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            templateOptions<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n              type<span class="token punctuation" >:</span> <span class="token string" >\'number\'</span><span class="token punctuation" >,</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n          <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'object\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'formly-group\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'boolean\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'checkbox\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'array\'</span><span class="token punctuation" >,</span> component<span class="token punctuation" >:</span> ArrayTypeComponent <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >\'enum\'</span><span class="token punctuation" >,</span> <span class="token keyword" >extends</span><span class="token punctuation" >:</span> <span class="token string" >\'select\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n  declarations<span class="token punctuation" >:</span> <span class="token punctuation" >[</span>\n    AppComponent<span class="token punctuation" >,</span>\n    ArrayTypeComponent<span class="token punctuation" >,</span>\n  <span class="token punctuation" >]</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token keyword" >export</span> <span class="token keyword" >class</span> <span class="token class-name" >AppModule</span> <span class="token punctuation" >{</span> <span class="token punctuation" >}</span>\n'}}]);